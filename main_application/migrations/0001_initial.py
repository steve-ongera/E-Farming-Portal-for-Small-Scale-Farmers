# Generated by Django 5.2.4 on 2025-09-26 09:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AgriculturalNews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('summary', models.TextField()),
                ('content', models.TextField()),
                ('source', models.CharField(blank=True, max_length=200)),
                ('url', models.URLField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='news/')),
                ('published_date', models.DateTimeField()),
                ('tags', models.JSONField(blank=True, default=list)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('population', models.IntegerField(blank=True, null=True)),
                ('area_sq_km', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('category', models.CharField(choices=[('general', 'General'), ('farming', 'Farming'), ('marketplace', 'Marketplace'), ('payments', 'Payments'), ('delivery', 'Delivery'), ('insurance', 'Insurance'), ('loans', 'Loans'), ('technical', 'Technical Support')], max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'faqs',
                'ordering': ['category', 'order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('processing_fee_percentage', models.DecimalField(decimal_places=4, default=0, max_digits=5)),
                ('minimum_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('maximum_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('plan_type', models.CharField(choices=[('basic', 'Basic'), ('premium', 'Premium'), ('professional', 'Professional'), ('enterprise', 'Enterprise')], max_length=20)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('billing_cycle', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annual')], max_length=20)),
                ('features', models.JSONField(default=list)),
                ('max_products', models.PositiveIntegerField(blank=True, null=True)),
                ('max_orders_per_month', models.PositiveIntegerField(blank=True, null=True)),
                ('premium_support', models.BooleanField(default=False)),
                ('market_insights', models.BooleanField(default=False)),
                ('priority_listing', models.BooleanField(default=False)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=5, max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'subscription_plans',
            },
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('config_type', models.CharField(choices=[('general', 'General Settings'), ('payment', 'Payment Settings'), ('notification', 'Notification Settings'), ('security', 'Security Settings'), ('integration', 'Integration Settings')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('farmer', 'Farmer'), ('buyer', 'Buyer'), ('admin', 'Administrator'), ('agent', 'Agricultural Agent'), ('supplier', 'Input Supplier')], default='buyer', max_length=20)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('national_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_document', models.FileField(blank=True, null=True, upload_to='verification/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('farmer', 'Farmer'), ('buyer', 'Buyer'), ('admin', 'Administrator'), ('agent', 'Agricultural Agent'), ('supplier', 'Input Supplier')], default='buyer', max_length=20)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('national_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_document', models.FileField(blank=True, null=True, upload_to='verification/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AppVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('android', 'Android'), ('ios', 'iOS')], max_length=20)),
                ('version_number', models.CharField(max_length=20)),
                ('build_number', models.CharField(max_length=20)),
                ('release_notes', models.TextField(blank=True)),
                ('minimum_supported_version', models.CharField(blank=True, max_length=20)),
                ('force_update', models.BooleanField(default=False)),
                ('download_url', models.URLField()),
                ('is_active', models.BooleanField(default=True)),
                ('release_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'app_versions',
                'unique_together': {('platform', 'version_number')},
            },
        ),
        migrations.CreateModel(
            name='BuyerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buyer_type', models.CharField(choices=[('individual', 'Individual Consumer'), ('restaurant', 'Restaurant'), ('hotel', 'Hotel'), ('retailer', 'Retailer'), ('wholesaler', 'Wholesaler'), ('processor', 'Food Processor'), ('exporter', 'Exporter'), ('institution', 'Institution')], max_length=20)),
                ('business_name', models.CharField(blank=True, max_length=200)),
                ('business_registration', models.CharField(blank=True, max_length=100)),
                ('tax_pin', models.CharField(blank=True, max_length=20)),
                ('annual_purchase_volume', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('preferred_payment_method', models.CharField(blank=True, max_length=50)),
                ('credit_limit', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('delivery_instructions', models.TextField(blank=True)),
                ('special_requirements', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='buyer_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('buyer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CropCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_application.cropcategory')),
            ],
        ),
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('scientific_name', models.CharField(blank=True, max_length=150)),
                ('variety', models.CharField(blank=True, max_length=100)),
                ('growing_season', models.CharField(blank=True, max_length=100)),
                ('maturity_period_days', models.IntegerField(blank=True, null=True)),
                ('ideal_temperature_min', models.FloatField(blank=True, null=True)),
                ('ideal_temperature_max', models.FloatField(blank=True, null=True)),
                ('ideal_rainfall', models.FloatField(blank=True, null=True)),
                ('storage_requirements', models.TextField(blank=True)),
                ('nutritional_info', models.JSONField(default=dict)),
                ('image', models.ImageField(blank=True, null=True, upload_to='crops/')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crops', to='main_application.cropcategory')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryPartner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('contact_person', models.CharField(max_length=200)),
                ('phone_number', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('pricing_model', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service_areas', models.ManyToManyField(related_name='delivery_partners', to='main_application.county')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('base_delivery_fee', models.DecimalField(decimal_places=2, max_digits=8)),
                ('free_delivery_threshold', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('estimated_delivery_days', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('counties', models.ManyToManyField(related_name='delivery_zones', to='main_application.county')),
            ],
        ),
        migrations.CreateModel(
            name='ExtensionAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=50, unique=True)),
                ('specialization', models.JSONField(default=list)),
                ('qualifications', models.TextField()),
                ('years_of_experience', models.PositiveIntegerField()),
                ('contact_hours', models.CharField(blank=True, max_length=100)),
                ('languages_spoken', models.JSONField(default=list)),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service_areas', models.ManyToManyField(related_name='extension_agents', to='main_application.county')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='agent_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'extension_agents',
            },
        ),
        migrations.CreateModel(
            name='FarmerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_name', models.CharField(max_length=200)),
                ('farming_type', models.CharField(choices=[('crop', 'Crop Farming'), ('livestock', 'Livestock Farming'), ('mixed', 'Mixed Farming'), ('poultry', 'Poultry Farming'), ('fish', 'Fish Farming'), ('horticulture', 'Horticulture')], max_length=20)),
                ('years_of_experience', models.CharField(choices=[('beginner', '0-2 years'), ('intermediate', '3-5 years'), ('experienced', '6-10 years'), ('expert', '10+ years')], max_length=20)),
                ('total_farm_size', models.DecimalField(decimal_places=2, help_text='In acres', max_digits=10)),
                ('farming_methods', models.JSONField(default=list, help_text='e.g., organic, conventional, etc.')),
                ('certifications', models.JSONField(default=list)),
                ('bank_account_number', models.CharField(blank=True, max_length=50)),
                ('bank_name', models.CharField(blank=True, max_length=100)),
                ('mpesa_number', models.CharField(blank=True, max_length=15)),
                ('is_cooperative_member', models.BooleanField(default=False)),
                ('cooperative_name', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='farmer_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('size', models.DecimalField(decimal_places=2, help_text='In acres', max_digits=10)),
                ('soil_type', models.CharField(blank=True, max_length=100)),
                ('water_source', models.CharField(blank=True, max_length=100)),
                ('irrigation_method', models.CharField(blank=True, max_length=100)),
                ('elevation', models.IntegerField(blank=True, help_text='In meters above sea level', null=True)),
                ('photos', models.JSONField(default=list)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farms', to='main_application.farmerprofile')),
            ],
            options={
                'db_table': 'farms',
            },
        ),
        migrations.CreateModel(
            name='ConsultationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('preferred_date', models.DateTimeField()),
                ('consultation_type', models.CharField(choices=[('phone', 'Phone Call'), ('video', 'Video Call'), ('visit', 'Farm Visit'), ('online', 'Online Chat')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('scheduled_date', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.PositiveIntegerField(default=60)),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('notes', models.TextField(blank=True)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultation_requests', to='main_application.extensionagent')),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultation_requests', to='main_application.farmerprofile')),
            ],
            options={
                'db_table': 'consultation_requests',
            },
        ),
        migrations.CreateModel(
            name='FinancialInstitution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('institution_type', models.CharField(choices=[('bank', 'Commercial Bank'), ('microfinance', 'Microfinance Institution'), ('sacco', 'SACCO'), ('government', 'Government Agency'), ('ngo', 'NGO')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('contact_person', models.CharField(blank=True, max_length=200)),
                ('phone_number', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service_areas', models.ManyToManyField(related_name='financial_institutions', to='main_application.county')),
            ],
            options={
                'db_table': 'financial_institutions',
            },
        ),
        migrations.CreateModel(
            name='GovernmentScheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('scheme_type', models.CharField(choices=[('subsidy', 'Subsidy'), ('loan', 'Loan Scheme'), ('insurance', 'Insurance Scheme'), ('training', 'Training Program'), ('equipment', 'Equipment Support'), ('input', 'Input Support'), ('market', 'Market Support')], max_length=20)),
                ('description', models.TextField()),
                ('implementing_agency', models.CharField(max_length=200)),
                ('eligibility_criteria', models.TextField()),
                ('application_process', models.TextField()),
                ('required_documents', models.JSONField(default=list)),
                ('benefit_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('application_deadline', models.DateField(blank=True, null=True)),
                ('scheme_validity', models.DateField(blank=True, null=True)),
                ('contact_information', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coverage_areas', models.ManyToManyField(related_name='government_schemes', to='main_application.county')),
                ('target_crops', models.ManyToManyField(blank=True, related_name='government_schemes', to='main_application.crop')),
            ],
            options={
                'db_table': 'government_schemes',
            },
        ),
        migrations.CreateModel(
            name='InputCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='input_categories/')),
                ('is_active', models.BooleanField(default=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_application.inputcategory')),
            ],
            options={
                'verbose_name_plural': 'Input Categories',
                'db_table': 'input_categories',
            },
        ),
        migrations.CreateModel(
            name='InputSupplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(max_length=200)),
                ('license_number', models.CharField(blank=True, max_length=100)),
                ('business_registration', models.CharField(blank=True, max_length=100)),
                ('delivery_available', models.BooleanField(default=False)),
                ('credit_terms_available', models.BooleanField(default=False)),
                ('minimum_order_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('total_sales', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service_areas', models.ManyToManyField(related_name='input_suppliers', to='main_application.county')),
                ('specialization', models.ManyToManyField(related_name='suppliers', to='main_application.inputcategory')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='supplier_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'input_suppliers',
            },
        ),
        migrations.CreateModel(
            name='InsurancePolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy_number', models.CharField(max_length=50, unique=True)),
                ('coverage_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('premium_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('policy_start_date', models.DateField()),
                ('policy_end_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('cancelled', 'Cancelled'), ('suspended', 'Suspended'), ('claimed', 'Claimed')], default='active', max_length=20)),
                ('beneficiaries', models.JSONField(default=list)),
                ('payment_schedule', models.CharField(blank=True, max_length=50)),
                ('last_premium_payment', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('covered_farms', models.ManyToManyField(related_name='insurance_policies', to='main_application.farm')),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insurance_policies', to='main_application.farmerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='InsuranceClaim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('claim_number', models.CharField(max_length=50, unique=True)),
                ('incident_date', models.DateField()),
                ('incident_description', models.TextField()),
                ('claimed_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('supporting_documents', models.JSONField(default=list)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_investigation', 'Under Investigation'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('paid', 'Paid'), ('closed', 'Closed')], default='submitted', max_length=20)),
                ('assessor_assigned', models.CharField(blank=True, max_length=200)),
                ('assessment_date', models.DateField(blank=True, null=True)),
                ('assessment_report', models.TextField(blank=True)),
                ('approved_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to='main_application.insurancepolicy')),
            ],
            options={
                'db_table': 'insurance_claims',
            },
        ),
        migrations.CreateModel(
            name='InsuranceProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('coverage_type', models.CharField(choices=[('crop', 'Crop Insurance'), ('livestock', 'Livestock Insurance'), ('weather', 'Weather Index Insurance'), ('area_yield', 'Area Yield Insurance'), ('multi_peril', 'Multi-Peril Crop Insurance')], max_length=20)),
                ('description', models.TextField()),
                ('coverage_percentage', models.DecimalField(decimal_places=2, default=80, max_digits=5)),
                ('premium_rate', models.DecimalField(decimal_places=4, max_digits=5)),
                ('minimum_coverage', models.DecimalField(decimal_places=2, max_digits=10)),
                ('maximum_coverage', models.DecimalField(decimal_places=2, max_digits=10)),
                ('covered_perils', models.JSONField(default=list)),
                ('exclusions', models.TextField(blank=True)),
                ('eligibility_criteria', models.TextField()),
                ('claim_process', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('covered_crops', models.ManyToManyField(blank=True, related_name='insurance_products', to='main_application.crop')),
            ],
        ),
        migrations.AddField(
            model_name='insurancepolicy',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='policies', to='main_application.insuranceproduct'),
        ),
        migrations.CreateModel(
            name='InsuranceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('license_number', models.CharField(max_length=100, unique=True)),
                ('contact_person', models.CharField(max_length=200)),
                ('phone_number', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service_areas', models.ManyToManyField(related_name='insurance_providers', to='main_application.county')),
            ],
            options={
                'db_table': 'insurance_providers',
            },
        ),
        migrations.AddField(
            model_name='insuranceproduct',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='main_application.insuranceprovider'),
        ),
        migrations.CreateModel(
            name='LoanProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('loan_type', models.CharField(max_length=100)),
                ('minimum_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('maximum_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('interest_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('repayment_period_months', models.PositiveIntegerField()),
                ('processing_fee_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('collateral_required', models.BooleanField(default=True)),
                ('collateral_types', models.JSONField(default=list)),
                ('eligibility_criteria', models.TextField()),
                ('required_documents', models.JSONField(default=list)),
                ('application_process', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loan_products', to='main_application.financialinstitution')),
            ],
            options={
                'db_table': 'loan_products',
            },
        ),
        migrations.CreateModel(
            name='LoanApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_number', models.CharField(max_length=50, unique=True)),
                ('requested_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('loan_purpose', models.TextField()),
                ('business_plan', models.TextField(blank=True)),
                ('collateral_offered', models.TextField(blank=True)),
                ('guarantors', models.JSONField(default=list)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('disbursed', 'Disbursed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('submitted_date', models.DateTimeField(blank=True, null=True)),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('decision_date', models.DateTimeField(blank=True, null=True)),
                ('approved_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('disbursement_date', models.DateTimeField(blank=True, null=True)),
                ('documents_uploaded', models.JSONField(default=list)),
                ('officer_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loan_applications', to='main_application.farmerprofile')),
                ('loan_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='main_application.loanproduct')),
            ],
            options={
                'db_table': 'loan_applications',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Home, Farm, Office', max_length=100)),
                ('village', models.CharField(max_length=100)),
                ('detailed_address', models.TextField()),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.county')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'locations',
            },
        ),
        migrations.AddField(
            model_name='farm',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.location'),
        ),
        migrations.CreateModel(
            name='Cooperative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('registration_number', models.CharField(max_length=100, unique=True)),
                ('cooperative_type', models.CharField(choices=[('primary', 'Primary Cooperative'), ('secondary', 'Secondary Cooperative'), ('union', 'Cooperative Union'), ('sacco', 'SACCO'), ('group', 'Farmer Group')], max_length=20)),
                ('description', models.TextField()),
                ('registration_date', models.DateField()),
                ('member_count', models.PositiveIntegerField(default=0)),
                ('share_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('services_offered', models.JSONField(default=list)),
                ('contact_phone', models.CharField(max_length=15)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chairman', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chaired_cooperatives', to=settings.AUTH_USER_MODEL)),
                ('secretary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secretary_cooperatives', to=settings.AUTH_USER_MODEL)),
                ('treasurer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treasurer_cooperatives', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.location')),
            ],
            options={
                'db_table': 'cooperatives',
            },
        ),
        migrations.CreateModel(
            name='MarketDemandForecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forecast_period', models.CharField(max_length=50)),
                ('expected_demand', models.CharField(choices=[('very_high', 'Very High'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('very_low', 'Very Low')], max_length=20)),
                ('price_prediction', models.CharField(choices=[('rising', 'Rising'), ('stable', 'Stable'), ('falling', 'Falling')], max_length=20)),
                ('confidence_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('factors', models.JSONField(default=list, help_text='Factors affecting demand')),
                ('recommendations', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demand_forecasts', to='main_application.crop')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.county')),
            ],
            options={
                'db_table': 'market_demand_forecasts',
            },
        ),
        migrations.CreateModel(
            name='MobileDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=200, unique=True)),
                ('device_type', models.CharField(choices=[('android', 'Android'), ('ios', 'iOS')], max_length=20)),
                ('device_token', models.TextField()),
                ('app_version', models.CharField(blank=True, max_length=20)),
                ('os_version', models.CharField(blank=True, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mobile_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'mobile_devices',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('order', 'Order Update'), ('payment', 'Payment'), ('delivery', 'Delivery'), ('weather', 'Weather Alert'), ('market', 'Market Update'), ('advisory', 'Agricultural Advisory'), ('system', 'System Notification'), ('promotion', 'Promotion')], max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('send_email', models.BooleanField(default=False)),
                ('send_sms', models.BooleanField(default=False)),
                ('send_push', models.BooleanField(default=True)),
                ('related_object_id', models.CharField(blank=True, max_length=100)),
                ('action_url', models.URLField(blank=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(max_length=50, unique=True)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('expected_delivery_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('processing', 'Processing'), ('ready', 'Ready for Delivery'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('partial', 'Partially Paid'), ('paid', 'Fully Paid'), ('refunded', 'Refunded'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('delivery_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('special_instructions', models.TextField(blank=True)),
                ('tracking_number', models.CharField(blank=True, max_length=100)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('delivery_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.location')),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_orders', to='main_application.farmerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver_name', models.CharField(blank=True, max_length=200)),
                ('driver_phone', models.CharField(blank=True, max_length=15)),
                ('vehicle_details', models.CharField(blank=True, max_length=200)),
                ('pickup_address', models.TextField()),
                ('delivery_address', models.TextField()),
                ('status', models.CharField(choices=[('assigned', 'Assigned'), ('picked_up', 'Picked Up'), ('in_transit', 'In Transit'), ('out_for_delivery', 'Out for Delivery'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('returned', 'Returned')], default='assigned', max_length=20)),
                ('estimated_delivery_time', models.DateTimeField()),
                ('actual_pickup_time', models.DateTimeField(blank=True, null=True)),
                ('actual_delivery_time', models.DateTimeField(blank=True, null=True)),
                ('delivery_notes', models.TextField(blank=True)),
                ('recipient_name', models.CharField(blank=True, max_length=200)),
                ('delivery_fee', models.DecimalField(decimal_places=2, max_digits=8)),
                ('tracking_updates', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('delivery_partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='main_application.deliverypartner')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delivery', to='main_application.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderStatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_status', models.CharField(blank=True, max_length=20)),
                ('new_status', models.CharField(max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='main_application.order')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('payment_type', models.CharField(choices=[('order', 'Order Payment'), ('refund', 'Refund'), ('partial', 'Partial Payment')], default='order', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('processing_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('net_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('gateway_reference', models.CharField(blank=True, max_length=200)),
                ('gateway_response', models.JSONField(default=dict)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='main_application.order')),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.paymentmethod')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=220, unique=True)),
                ('description', models.TextField()),
                ('quantity_available', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_per_unit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('minimum_order', models.DecimalField(decimal_places=2, default=1, max_digits=10)),
                ('quality_grade', models.CharField(choices=[('premium', 'Premium'), ('grade_a', 'Grade A'), ('grade_b', 'Grade B'), ('standard', 'Standard')], default='standard', max_length=20)),
                ('harvest_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('organic_certified', models.BooleanField(default=False)),
                ('certification_body', models.CharField(blank=True, max_length=100)),
                ('storage_condition', models.CharField(blank=True, max_length=200)),
                ('packaging_options', models.JSONField(default=list)),
                ('images', models.JSONField(default=list)),
                ('videos', models.JSONField(default=list)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('sold_out', 'Sold Out'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='draft', max_length=20)),
                ('featured', models.BooleanField(default=False)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='main_application.crop')),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='main_application.farm')),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='main_application.farmerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('product_snapshot', models.JSONField(default=dict, help_text='Product details at time of order')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main_application.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.product')),
            ],
            options={
                'db_table': 'order_items',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('is_primary', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_images', to='main_application.product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('abbreviation', models.CharField(max_length=10, unique=True)),
                ('conversion_factor', models.DecimalField(decimal_places=4, default=1, max_digits=10)),
                ('base_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_application.productunit')),
            ],
            options={
                'db_table': 'product_units',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.productunit'),
        ),
        migrations.CreateModel(
            name='QualityInspector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=100, unique=True)),
                ('certifications', models.JSONField(default=list)),
                ('inspection_fee', models.DecimalField(decimal_places=2, max_digits=8)),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service_areas', models.ManyToManyField(related_name='quality_inspectors', to='main_application.county')),
                ('specialization', models.ManyToManyField(related_name='quality_inspectors', to='main_application.crop')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='inspector_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'quality_inspectors',
            },
        ),
        migrations.CreateModel(
            name='QualityInspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspection_number', models.CharField(max_length=50, unique=True)),
                ('inspection_type', models.CharField(choices=[('pre_harvest', 'Pre-Harvest'), ('post_harvest', 'Post-Harvest'), ('storage', 'Storage Inspection'), ('export', 'Export Inspection'), ('certification', 'Certification Inspection')], max_length=20)),
                ('scheduled_date', models.DateTimeField()),
                ('actual_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('inspection_parameters', models.JSONField(default=dict)),
                ('test_results', models.JSONField(default=dict)),
                ('overall_grade', models.CharField(blank=True, max_length=20)),
                ('pass_fail_status', models.CharField(blank=True, max_length=10)),
                ('recommendations', models.TextField(blank=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('certificate_number', models.CharField(blank=True, max_length=100)),
                ('validity_date', models.DateField(blank=True, null=True)),
                ('inspection_fee', models.DecimalField(decimal_places=2, max_digits=8)),
                ('report_document', models.FileField(blank=True, null=True, upload_to='inspection_reports/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_inspections', to='main_application.product')),
                ('inspector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inspections', to='main_application.qualityinspector')),
            ],
            options={
                'db_table': 'quality_inspections',
            },
        ),
        migrations.CreateModel(
            name='SchemeApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_number', models.CharField(max_length=50, unique=True)),
                ('application_data', models.JSONField(default=dict)),
                ('supporting_documents', models.JSONField(default=list)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('disbursed', 'Disbursed')], default='draft', max_length=20)),
                ('submitted_date', models.DateTimeField(blank=True, null=True)),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('decision_date', models.DateTimeField(blank=True, null=True)),
                ('approved_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('disbursement_date', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('officer_comments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheme_applications', to='main_application.farmerprofile')),
                ('scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='main_application.governmentscheme')),
            ],
            options={
                'db_table': 'scheme_applications',
            },
        ),
        migrations.CreateModel(
            name='SubCounty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=15)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcounties', to='main_application.county')),
            ],
            options={
                'verbose_name_plural': 'Sub-counties',
                'db_table': 'subcounties',
                'unique_together': {('county', 'name')},
            },
        ),
        migrations.AddField(
            model_name='location',
            name='subcounty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty'),
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.CharField(max_length=50, unique=True)),
                ('subject', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('technical', 'Technical Issue'), ('account', 'Account Issue'), ('payment', 'Payment Issue'), ('order', 'Order Issue'), ('delivery', 'Delivery Issue'), ('general', 'General Inquiry'), ('complaint', 'Complaint'), ('suggestion', 'Suggestion')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('waiting_response', 'Waiting for Response'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('attachments', models.JSONField(default=list)),
                ('resolution', models.TextField(blank=True)),
                ('satisfaction_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'support_tickets',
            },
        ),
        migrations.CreateModel(
            name='SystemMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(max_length=100)),
                ('metric_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('metric_type', models.CharField(max_length=50)),
                ('period', models.CharField(max_length=20)),
                ('date_recorded', models.DateField()),
                ('additional_data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'system_metrics',
                'unique_together': {('metric_name', 'period', 'date_recorded')},
            },
        ),
        migrations.CreateModel(
            name='TicketMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('attachments', models.JSONField(default=list)),
                ('is_internal', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='main_application.supportticket')),
            ],
            options={
                'db_table': 'ticket_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('contact_person', models.CharField(max_length=200)),
                ('phone_number', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True)),
                ('specializations', models.JSONField(default=list)),
                ('accreditation', models.CharField(blank=True, max_length=200)),
                ('is_verified', models.BooleanField(default=False)),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service_areas', models.ManyToManyField(related_name='training_providers', to='main_application.county')),
            ],
            options={
                'db_table': 'training_providers',
            },
        ),
        migrations.CreateModel(
            name='TrainingCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('course_type', models.CharField(choices=[('online', 'Online Course'), ('physical', 'Physical Training'), ('hybrid', 'Hybrid')], max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=20)),
                ('duration_hours', models.PositiveIntegerField()),
                ('course_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('max_participants', models.PositiveIntegerField(default=50)),
                ('prerequisites', models.TextField(blank=True)),
                ('learning_objectives', models.JSONField(default=list)),
                ('curriculum', models.JSONField(default=list)),
                ('certification_offered', models.BooleanField(default=False)),
                ('certificate_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('materials_provided', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('target_crops', models.ManyToManyField(blank=True, related_name='training_courses', to='main_application.crop')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='main_application.trainingprovider')),
            ],
            options={
                'db_table': 'training_courses',
            },
        ),
        migrations.CreateModel(
            name='TrainingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_name', models.CharField(max_length=200)),
                ('instructor', models.CharField(max_length=200)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('online_meeting_link', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='upcoming', max_length=20)),
                ('enrolled_count', models.PositiveIntegerField(default=0)),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('materials', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='main_application.trainingcourse')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_application.location')),
            ],
            options={
                'db_table': 'training_sessions',
            },
        ),
        migrations.CreateModel(
            name='TrainingEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('enrolled', 'Enrolled'), ('completed', 'Completed'), ('dropped', 'Dropped'), ('failed', 'Failed')], default='enrolled', max_length=20)),
                ('progress_percentage', models.PositiveIntegerField(default=0)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('certificate_number', models.CharField(blank=True, max_length=100)),
                ('final_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('feedback_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_comment', models.TextField(blank=True)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_enrollments', to='main_application.farmerprofile')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='main_application.trainingsession')),
            ],
            options={
                'db_table': 'training_enrollments',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=200)),
                ('metadata', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_activities',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('facebook_url', models.URLField(blank=True)),
                ('twitter_url', models.URLField(blank=True)),
                ('linkedin_url', models.URLField(blank=True)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('notification_preferences', models.JSONField(default=dict)),
                ('privacy_settings', models.JSONField(default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('pending', 'Pending Payment')], default='pending', max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('auto_renew', models.BooleanField(default=True)),
                ('last_payment_date', models.DateTimeField(blank=True, null=True)),
                ('next_payment_date', models.DateTimeField(blank=True, null=True)),
                ('cancellation_date', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.paymentmethod')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='main_application.subscriptionplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20)),
                ('subcounty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wards', to='main_application.subcounty')),
            ],
            options={
                'db_table': 'wards',
            },
        ),
        migrations.AddField(
            model_name='location',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.ward'),
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('capacity', models.DecimalField(decimal_places=2, help_text='In metric tons', max_digits=10)),
                ('storage_types', models.JSONField(default=list, help_text='e.g., cold storage, dry storage')),
                ('facilities', models.JSONField(default=list)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('daily_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('monthly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('security_features', models.JSONField(default=list)),
                ('certifications', models.JSONField(default=list)),
                ('operating_hours', models.CharField(blank=True, max_length=200)),
                ('contact_phone', models.CharField(max_length=15)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.location')),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_warehouses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'warehouses',
            },
        ),
        migrations.CreateModel(
            name='StorageBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_number', models.CharField(max_length=50, unique=True)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('storage_type', models.CharField(max_length=100)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('total_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('special_requirements', models.TextField(blank=True)),
                ('check_in_date', models.DateTimeField(blank=True, null=True)),
                ('check_out_date', models.DateTimeField(blank=True, null=True)),
                ('condition_report', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage_bookings', to='main_application.farmerprofile')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage_bookings', to='main_application.product')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='main_application.warehouse')),
            ],
            options={
                'db_table': 'storage_bookings',
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlisted_by', to='main_application.product')),
            ],
            options={
                'db_table': 'wishlists',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('view', 'View'), ('export', 'Export'), ('login', 'Login'), ('logout', 'Logout')], max_length=20)),
                ('object_type', models.CharField(max_length=100)),
                ('object_id', models.CharField(blank=True, max_length=100)),
                ('object_repr', models.CharField(blank=True, max_length=200)),
                ('changes', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_logs',
                'indexes': [models.Index(fields=['user', 'timestamp'], name='audit_logs_user_id_88267f_idx'), models.Index(fields=['object_type', 'object_id'], name='audit_logs_object__457405_idx'), models.Index(fields=['timestamp'], name='audit_logs_timesta_423be6_idx')],
            },
        ),
        migrations.CreateModel(
            name='CooperativeMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('membership_number', models.CharField(max_length=50)),
                ('join_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('terminated', 'Terminated'), ('pending', 'Pending Approval')], default='pending', max_length=20)),
                ('shares_owned', models.PositiveIntegerField(default=0)),
                ('total_contribution', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('position', models.CharField(blank=True, max_length=100)),
                ('monthly_contribution', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('last_contribution_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cooperative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='main_application.cooperative')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cooperative_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'cooperative_memberships',
                'unique_together': {('cooperative', 'member')},
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('slug', models.SlugField(max_length=300, unique=True)),
                ('content', models.TextField()),
                ('summary', models.TextField(blank=True)),
                ('content_type', models.CharField(choices=[('article', 'Article'), ('guide', 'How-to Guide'), ('news', 'News'), ('case_study', 'Case Study'), ('research', 'Research')], default='article', max_length=20)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='blog/')),
                ('tags', models.JSONField(default=list)),
                ('is_published', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('related_crops', models.ManyToManyField(blank=True, related_name='blog_posts', to='main_application.crop')),
            ],
            options={
                'db_table': 'blog_posts',
                'indexes': [models.Index(fields=['is_published', 'published_at'], name='blog_posts_is_publ_4325e6_idx'), models.Index(fields=['content_type', 'is_published'], name='blog_posts_content_7be0d1_idx')],
            },
        ),
        migrations.CreateModel(
            name='CropCalendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planting_season_start', models.CharField(max_length=20)),
                ('planting_season_end', models.CharField(max_length=20)),
                ('harvesting_season_start', models.CharField(max_length=20)),
                ('harvesting_season_end', models.CharField(max_length=20)),
                ('recommended_varieties', models.TextField(blank=True)),
                ('special_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.county')),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_entries', to='main_application.crop')),
            ],
            options={
                'db_table': 'crop_calendar',
                'unique_together': {('crop', 'county')},
            },
        ),
        migrations.CreateModel(
            name='Advisory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('advisory_type', models.CharField(choices=[('weather', 'Weather Advisory'), ('pest', 'Pest Control'), ('disease', 'Disease Management'), ('planting', 'Planting Advisory'), ('harvesting', 'Harvesting Advisory'), ('market', 'Market Advisory'), ('general', 'General Advisory')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('content', models.TextField()),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('attachments', models.JSONField(default=list)),
                ('is_published', models.BooleanField(default=False)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('target_areas', models.ManyToManyField(blank=True, related_name='advisories', to='main_application.county')),
                ('target_crops', models.ManyToManyField(blank=True, related_name='advisories', to='main_application.crop')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advisories', to='main_application.extensionagent')),
            ],
            options={
                'db_table': 'advisories',
                'indexes': [models.Index(fields=['advisory_type', 'is_published'], name='advisories_advisor_618508_idx'), models.Index(fields=['valid_from', 'valid_until'], name='advisories_valid_f_9ad8f4_idx')],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('attachments', models.JSONField(default=list)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_application.message')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'messages',
                'indexes': [models.Index(fields=['recipient', 'is_read'], name='messages_recipie_6234cf_idx'), models.Index(fields=['sender', 'created_at'], name='messages_sender__bf8b1c_idx')],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main_application.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.product')),
            ],
            options={
                'db_table': 'cart_items',
                'unique_together': {('cart', 'product')},
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('images', models.JSONField(blank=True, default=list)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_reviews', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='main_application.product')),
            ],
            options={
                'db_table': 'product_reviews',
                'unique_together': {('product', 'buyer')},
            },
        ),
        migrations.CreateModel(
            name='MarketPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market_name', models.CharField(blank=True, max_length=200)),
                ('price_per_unit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('quality_grade', models.CharField(blank=True, max_length=50)),
                ('supply_level', models.CharField(blank=True, help_text='e.g., High, Medium, Low', max_length=50)),
                ('demand_level', models.CharField(blank=True, max_length=50)),
                ('price_trend', models.CharField(blank=True, help_text='e.g., Rising, Falling, Stable', max_length=20)),
                ('source', models.CharField(blank=True, max_length=100)),
                ('date_recorded', models.DateField()),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_prices', to='main_application.crop')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.county')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.productunit')),
            ],
            options={
                'db_table': 'market_prices',
                'indexes': [models.Index(fields=['crop', 'location', 'date_recorded'], name='market_pric_crop_id_520787_idx'), models.Index(fields=['date_recorded'], name='market_pric_date_re_f2e9e1_idx')],
            },
        ),
        migrations.CreateModel(
            name='AgriculturalInput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('brand', models.CharField(blank=True, max_length=100)),
                ('input_type', models.CharField(choices=[('seeds', 'Seeds'), ('fertilizer', 'Fertilizer'), ('pesticide', 'Pesticide'), ('herbicide', 'Herbicide'), ('fungicide', 'Fungicide'), ('equipment', 'Equipment'), ('tools', 'Tools'), ('irrigation', 'Irrigation'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('specifications', models.JSONField(default=dict)),
                ('price_per_unit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('minimum_order', models.DecimalField(decimal_places=2, default=1, max_digits=10)),
                ('stock_quantity', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=200)),
                ('registration_number', models.CharField(blank=True, max_length=100)),
                ('safety_instructions', models.TextField(blank=True)),
                ('application_instructions', models.TextField(blank=True)),
                ('images', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('compatible_crops', models.ManyToManyField(blank=True, related_name='compatible_inputs', to='main_application.crop')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inputs', to='main_application.inputcategory')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inputs', to='main_application.inputsupplier')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.productunit')),
            ],
            options={
                'db_table': 'agricultural_inputs',
                'indexes': [models.Index(fields=['input_type', 'is_active'], name='agricultura_input_t_d411dc_idx'), models.Index(fields=['supplier', 'is_active'], name='agricultura_supplie_06e5b4_idx')],
            },
        ),
        migrations.CreateModel(
            name='QualityStandard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('standard_name', models.CharField(max_length=100)),
                ('certifying_body', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('requirements', models.JSONField(default=dict)),
                ('testing_parameters', models.JSONField(default=list)),
                ('validity_period_months', models.PositiveIntegerField(default=12)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_standards', to='main_application.crop')),
            ],
            options={
                'db_table': 'quality_standards',
                'unique_together': {('crop', 'standard_name')},
            },
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['user', 'status'], name='support_tic_user_id_057736_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['status', 'priority'], name='support_tic_status_c8e2c5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trainingenrollment',
            unique_together={('farmer', 'session')},
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', 'timestamp'], name='user_activi_user_id_d06d90_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['activity_type', 'timestamp'], name='user_activi_activit_8de630_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['user', 'status'], name='user_subscr_user_id_c57286_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['end_date', 'status'], name='user_subscr_end_dat_a93449_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ward',
            unique_together={('subcounty', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='wishlist',
            unique_together={('buyer', 'product')},
        ),
    ]
